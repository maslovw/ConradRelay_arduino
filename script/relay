#!/usr/bin/env python3
import sys
import os
import serial
import logging
import yaml

# Get the real path of the script resolving symlinks
real_script_path = os.path.realpath(sys.argv[0])
# Get the directory of the real script path
real_directory_path = os.path.dirname(real_script_path)
config_path = os.path.join(real_directory_path, 'config.yaml')

RELAY_CONFIG = os.environ.get('RELAY_CONFIG', f'{config_path}')

logger = logging.getLogger('relay')

class Connection():
    def __init__(self, port=None, baudrate=None):
        self.is_connected = False
        if baudrate and port:
            self.connect(port, baudrate)

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

    def __del__(self):
        self.close()

    def connect(self, port, baudrate):
        self.close()
        try:
            self.ser = serial.Serial(port, baudrate=baudrate)
            self.ser.timeout = 5
            self.send_command(1, 0)
            self.is_connected = True
        except Exception as e:
            logger.error("connect failed: {}".format(e))
            self.is_connected = False

        return self.is_connected

    def close(self):
        if self.is_connected:
            self.ser.close()
            self.is_connected = False

    def get_xor(self, data):
        return data[0] ^ data[1] ^ data[2]

    def send_command(self, command, data):
        resp = None
        if not self.is_connected:
            return None
        try:
            command = int(command)
            data = int(data)
            cmd = bytearray([command & 0xFF, 0, data & 0xFF, 0])
            cmd[3] = self.get_xor(cmd)
            res = self.ser.write(cmd)
            if res != 4:
                logger.error("Send command '{}' failed: res = {}".format(command, res))
            resp = self.ser.read(4)
            if len(resp) != 4:
                logger.error("Read resp '{}' failed: resp = {}".format(command, resp))
            elif resp[3] != self.get_xor(resp):
                logger.error("Read resp '{}' failed: resp = {}".format(command, resp))
        except Exception as e:
            logger.error("Send command '{}' failed".format(command))
            logger.error(e)
            return None
        return resp

class Control():
    def __init__(self, config):
        self.relays = None
        self.connection = None
        if config:
            self.set_config(config)

    def set_config(self, config):
        self.relays = config['relays']
        self.connection = Connection(config['relay_port'], config['relay_baudrate'])


    def __del__(self):
        if self.connection:
            self.connection.close()

    def toggle_relay(self, relay_name):
        pin = self.relays.get(relay_name, None)
        if pin:
            result = self.connection.send_command(8, pin)
            logger.debug('Toggle {}[{}]: {}'.format(relay_name, pin, result))
        else:
            logger.warning('Toggle unknown relay: {}'.format(relay_name))

    def set_relay(self, relay_name, state=1):
        pin = self.relays.get(relay_name, None)
        if pin:
            cmd = 6 if state == 1 else 7
            result = self.connection.send_command(cmd, pin)
            logger.debug('{} {}[{}]: {}'.format("Set" if state else "Reset", relay_name, pin, result))
        else:
            logger.warning('Set unknown relay: {}'.format(relay_name))

    def reset_relay(self, relay_name):
        self.set_relay(relay_name, 0)

def print_help(relay_keys, action_keys, config):
    print("Usage: relay [name, action]")
    print("This script sends UART command to relay module")
    print("Examples: ")
    if relay_keys:
        import random
        relay_keys = list(relay_keys)
        if action_keys:
            action_keys=list(action_keys)
        for relay in relay_keys:
            if action_keys:
                action = random.choice(action_keys)
            print(f" relay {relay} {action}")
        print("Available relay names:", ", ".join(relay_keys))
    else:
        print(" relay set all")
        print(" relay all off")
        print(" relay toggle r1")

    if action_keys:
        print("Available actions:", ", ".join(list(action_keys)))
    print("")
    print(f"Config file can be specified in environment variable RELAY_CONFIG")
    print(f"Current configuration used: '{RELAY_CONFIG}'")
    if config:
        print(f"Configured port {config['relay_port']}")
        print(f"Configured baudrate {config['relay_baudrate']}")

    print("")
    print(f"Note: arduino relay module Baudrate is 9600, but Conrad Relay module is 19200")
    print("")

def main():
    r = Control(None)
    actions = {'set': r.set_relay, 'reset': r.reset_relay, 'toggle': r.toggle_relay, 'on': r.set_relay, 'off': r.reset_relay}

    args = sys.argv[1:]
    cmd_args = []
    action = None
    pin = None

    try:
        with open(f'{RELAY_CONFIG}', 'r') as file:
            config = yaml.safe_load(file)

        r.set_config(config)
    except Exception as e:
        print_help(None, actions.keys(), None)
        logger.error(f"Reading config: '{RELAY_CONFIG}' failed")
        logger.error(e)
        sys.exit(1)

    for i, arg in enumerate(args):
        if arg == '-h' or arg == '--help':
            print_help(r.relays.keys(), actions.keys(), config)
            sys.exit(0)
        if arg in actions:
            action = actions[arg]
        else:
            pin = r.relays.get(arg)
            if pin:
                pin = arg

    if action is None or pin is None :
        print_help(r.relays.keys(), actions.keys(), config)
        sys.exit(1)


    action(pin)

if __name__ == "__main__":
    main()

